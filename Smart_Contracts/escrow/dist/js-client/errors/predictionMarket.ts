/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { PREDICTION_MARKET_PROGRAM_ADDRESS } from '../programs';

/** MarketAlreadyResolved: Market has already been resolved */
export const PREDICTION_MARKET_ERROR__MARKET_ALREADY_RESOLVED = 0x1770; // 6000
/** MarketNotExpired: Market resolution time has not passed */
export const PREDICTION_MARKET_ERROR__MARKET_NOT_EXPIRED = 0x1771; // 6001
/** MarketExpired: Market has expired and cannot accept new bets */
export const PREDICTION_MARKET_ERROR__MARKET_EXPIRED = 0x1772; // 6002
/** BetAmountTooLow: Bet amount is below minimum required */
export const PREDICTION_MARKET_ERROR__BET_AMOUNT_TOO_LOW = 0x1773; // 6003
/** MarketNotResolved: Market is not resolved yet */
export const PREDICTION_MARKET_ERROR__MARKET_NOT_RESOLVED = 0x1774; // 6004
/** NoWinningsToClaim: User has no winnings to claim */
export const PREDICTION_MARKET_ERROR__NO_WINNINGS_TO_CLAIM = 0x1775; // 6005
/** UserAlreadyBet: User already has a bet on this market */
export const PREDICTION_MARKET_ERROR__USER_ALREADY_BET = 0x1776; // 6006
/** UnauthorizedResolver: Unauthorized to resolve market */
export const PREDICTION_MARKET_ERROR__UNAUTHORIZED_RESOLVER = 0x1777; // 6007
/** TitleTooLong: Title too long */
export const PREDICTION_MARKET_ERROR__TITLE_TOO_LONG = 0x1778; // 6008
/** DescriptionTooLong: Description too long */
export const PREDICTION_MARKET_ERROR__DESCRIPTION_TOO_LONG = 0x1779; // 6009
/** InvalidResolutionTime: Invalid resolution time */
export const PREDICTION_MARKET_ERROR__INVALID_RESOLUTION_TIME = 0x177a; // 6010
/** MarketStillActive: Market is still active */
export const PREDICTION_MARKET_ERROR__MARKET_STILL_ACTIVE = 0x177b; // 6011
/** ArithmeticOverflow: Arithmetic overflow */
export const PREDICTION_MARKET_ERROR__ARITHMETIC_OVERFLOW = 0x177c; // 6012
/** UserBetOnLosingOutcome: User bet on losing outcome */
export const PREDICTION_MARKET_ERROR__USER_BET_ON_LOSING_OUTCOME = 0x177d; // 6013

export type PredictionMarketError =
  | typeof PREDICTION_MARKET_ERROR__ARITHMETIC_OVERFLOW
  | typeof PREDICTION_MARKET_ERROR__BET_AMOUNT_TOO_LOW
  | typeof PREDICTION_MARKET_ERROR__DESCRIPTION_TOO_LONG
  | typeof PREDICTION_MARKET_ERROR__INVALID_RESOLUTION_TIME
  | typeof PREDICTION_MARKET_ERROR__MARKET_ALREADY_RESOLVED
  | typeof PREDICTION_MARKET_ERROR__MARKET_EXPIRED
  | typeof PREDICTION_MARKET_ERROR__MARKET_NOT_EXPIRED
  | typeof PREDICTION_MARKET_ERROR__MARKET_NOT_RESOLVED
  | typeof PREDICTION_MARKET_ERROR__MARKET_STILL_ACTIVE
  | typeof PREDICTION_MARKET_ERROR__NO_WINNINGS_TO_CLAIM
  | typeof PREDICTION_MARKET_ERROR__TITLE_TOO_LONG
  | typeof PREDICTION_MARKET_ERROR__UNAUTHORIZED_RESOLVER
  | typeof PREDICTION_MARKET_ERROR__USER_ALREADY_BET
  | typeof PREDICTION_MARKET_ERROR__USER_BET_ON_LOSING_OUTCOME;

let predictionMarketErrorMessages:
  | Record<PredictionMarketError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  predictionMarketErrorMessages = {
    [PREDICTION_MARKET_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [PREDICTION_MARKET_ERROR__BET_AMOUNT_TOO_LOW]: `Bet amount is below minimum required`,
    [PREDICTION_MARKET_ERROR__DESCRIPTION_TOO_LONG]: `Description too long`,
    [PREDICTION_MARKET_ERROR__INVALID_RESOLUTION_TIME]: `Invalid resolution time`,
    [PREDICTION_MARKET_ERROR__MARKET_ALREADY_RESOLVED]: `Market has already been resolved`,
    [PREDICTION_MARKET_ERROR__MARKET_EXPIRED]: `Market has expired and cannot accept new bets`,
    [PREDICTION_MARKET_ERROR__MARKET_NOT_EXPIRED]: `Market resolution time has not passed`,
    [PREDICTION_MARKET_ERROR__MARKET_NOT_RESOLVED]: `Market is not resolved yet`,
    [PREDICTION_MARKET_ERROR__MARKET_STILL_ACTIVE]: `Market is still active`,
    [PREDICTION_MARKET_ERROR__NO_WINNINGS_TO_CLAIM]: `User has no winnings to claim`,
    [PREDICTION_MARKET_ERROR__TITLE_TOO_LONG]: `Title too long`,
    [PREDICTION_MARKET_ERROR__UNAUTHORIZED_RESOLVER]: `Unauthorized to resolve market`,
    [PREDICTION_MARKET_ERROR__USER_ALREADY_BET]: `User already has a bet on this market`,
    [PREDICTION_MARKET_ERROR__USER_BET_ON_LOSING_OUTCOME]: `User bet on losing outcome`,
  };
}

export function getPredictionMarketErrorMessage(
  code: PredictionMarketError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      predictionMarketErrorMessages as Record<PredictionMarketError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPredictionMarketError<
  TProgramErrorCode extends PredictionMarketError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PREDICTION_MARKET_PROGRAM_ADDRESS,
    code
  );
}
