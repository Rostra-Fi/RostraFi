/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PREDICTION_MARKET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_WINNINGS_DISCRIMINATOR = new Uint8Array([
  161, 215, 24, 59, 14, 236, 242, 221,
]);

export function getClaimWinningsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_WINNINGS_DISCRIMINATOR
  );
}

export type ClaimWinningsInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountBettor extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountBet extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBettor extends string
        ? WritableSignerAccount<TAccountBettor> &
            IAccountSignerMeta<TAccountBettor>
        : TAccountBettor,
      TAccountMarket extends string
        ? ReadonlyAccount<TAccountMarket>
        : TAccountMarket,
      TAccountBet extends string ? WritableAccount<TAccountBet> : TAccountBet,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimWinningsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimWinningsInstructionDataArgs = {};

export function getClaimWinningsInstructionDataEncoder(): Encoder<ClaimWinningsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_WINNINGS_DISCRIMINATOR })
  );
}

export function getClaimWinningsInstructionDataDecoder(): Decoder<ClaimWinningsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimWinningsInstructionDataCodec(): Codec<
  ClaimWinningsInstructionDataArgs,
  ClaimWinningsInstructionData
> {
  return combineCodec(
    getClaimWinningsInstructionDataEncoder(),
    getClaimWinningsInstructionDataDecoder()
  );
}

export type ClaimWinningsAsyncInput<
  TAccountBettor extends string = string,
  TAccountMarket extends string = string,
  TAccountBet extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  bettor: TransactionSigner<TAccountBettor>;
  market: Address<TAccountMarket>;
  bet?: Address<TAccountBet>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getClaimWinningsInstructionAsync<
  TAccountBettor extends string,
  TAccountMarket extends string,
  TAccountBet extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: ClaimWinningsAsyncInput<
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimWinningsInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bettor: { value: input.bettor ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: false },
    bet: { value: input.bet ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.bet.value) {
    accounts.bet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([98, 101, 116])),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getAddressEncoder().encode(expectAddress(accounts.bettor.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bettor),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.bet),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimWinningsInstructionDataEncoder().encode({}),
  } as ClaimWinningsInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimWinningsInput<
  TAccountBettor extends string = string,
  TAccountMarket extends string = string,
  TAccountBet extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  bettor: TransactionSigner<TAccountBettor>;
  market: Address<TAccountMarket>;
  bet: Address<TAccountBet>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClaimWinningsInstruction<
  TAccountBettor extends string,
  TAccountMarket extends string,
  TAccountBet extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: ClaimWinningsInput<
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimWinningsInstruction<
  TProgramAddress,
  TAccountBettor,
  TAccountMarket,
  TAccountBet,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bettor: { value: input.bettor ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: false },
    bet: { value: input.bet ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bettor),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.bet),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimWinningsInstructionDataEncoder().encode({}),
  } as ClaimWinningsInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimWinningsInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    bettor: TAccountMetas[0];
    market: TAccountMetas[1];
    bet: TAccountMetas[2];
    vault: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: ClaimWinningsInstructionData;
};

export function parseClaimWinningsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimWinningsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bettor: getNextAccount(),
      market: getNextAccount(),
      bet: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimWinningsInstructionDataDecoder().decode(instruction.data),
  };
}
