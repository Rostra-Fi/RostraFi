/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PREDICTION_MARKET_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_MARKET_DISCRIMINATOR = new Uint8Array([
  103, 226, 97, 235, 200, 188, 251, 254,
]);

export function getCreateMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_MARKET_DISCRIMINATOR
  );
}

export type CreateMarketInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountResolver extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountResolver extends string
        ? ReadonlyAccount<TAccountResolver>
        : TAccountResolver,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMarketInstructionData = {
  discriminator: ReadonlyUint8Array;
  marketId: bigint;
  title: string;
  description: string;
  resolutionTime: bigint;
};

export type CreateMarketInstructionDataArgs = {
  marketId: number | bigint;
  title: string;
  description: string;
  resolutionTime: number | bigint;
};

export function getCreateMarketInstructionDataEncoder(): Encoder<CreateMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['marketId', getU64Encoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['resolutionTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_MARKET_DISCRIMINATOR })
  );
}

export function getCreateMarketInstructionDataDecoder(): Decoder<CreateMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['marketId', getU64Decoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['resolutionTime', getI64Decoder()],
  ]);
}

export function getCreateMarketInstructionDataCodec(): Codec<
  CreateMarketInstructionDataArgs,
  CreateMarketInstructionData
> {
  return combineCodec(
    getCreateMarketInstructionDataEncoder(),
    getCreateMarketInstructionDataDecoder()
  );
}

export type CreateMarketAsyncInput<
  TAccountCreator extends string = string,
  TAccountMarket extends string = string,
  TAccountResolver extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  market?: Address<TAccountMarket>;
  resolver: Address<TAccountResolver>;
  systemProgram?: Address<TAccountSystemProgram>;
  marketId: CreateMarketInstructionDataArgs['marketId'];
  title: CreateMarketInstructionDataArgs['title'];
  description: CreateMarketInstructionDataArgs['description'];
  resolutionTime: CreateMarketInstructionDataArgs['resolutionTime'];
};

export async function getCreateMarketInstructionAsync<
  TAccountCreator extends string,
  TAccountMarket extends string,
  TAccountResolver extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: CreateMarketAsyncInput<
    TAccountCreator,
    TAccountMarket,
    TAccountResolver,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateMarketInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountMarket,
    TAccountResolver,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: true },
    resolver: { value: input.resolver ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.market.value) {
    accounts.market.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 114, 107, 101, 116])),
        getU64Encoder().encode(expectSome(args.marketId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.resolver),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateMarketInstructionDataEncoder().encode(
      args as CreateMarketInstructionDataArgs
    ),
  } as CreateMarketInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountMarket,
    TAccountResolver,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateMarketInput<
  TAccountCreator extends string = string,
  TAccountMarket extends string = string,
  TAccountResolver extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  market: Address<TAccountMarket>;
  resolver: Address<TAccountResolver>;
  systemProgram?: Address<TAccountSystemProgram>;
  marketId: CreateMarketInstructionDataArgs['marketId'];
  title: CreateMarketInstructionDataArgs['title'];
  description: CreateMarketInstructionDataArgs['description'];
  resolutionTime: CreateMarketInstructionDataArgs['resolutionTime'];
};

export function getCreateMarketInstruction<
  TAccountCreator extends string,
  TAccountMarket extends string,
  TAccountResolver extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: CreateMarketInput<
    TAccountCreator,
    TAccountMarket,
    TAccountResolver,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMarketInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountMarket,
  TAccountResolver,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: true },
    resolver: { value: input.resolver ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.resolver),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateMarketInstructionDataEncoder().encode(
      args as CreateMarketInstructionDataArgs
    ),
  } as CreateMarketInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountMarket,
    TAccountResolver,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateMarketInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    market: TAccountMetas[1];
    resolver: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateMarketInstructionData;
};

export function parseCreateMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      market: getNextAccount(),
      resolver: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateMarketInstructionDataDecoder().decode(instruction.data),
  };
}
