/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PREDICTION_MARKET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PLACE_BET_DISCRIMINATOR = new Uint8Array([
  222, 62, 67, 220, 63, 166, 126, 33,
]);

export function getPlaceBetDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PLACE_BET_DISCRIMINATOR);
}

export type PlaceBetInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountBettor extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountBet extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBettor extends string
        ? WritableSignerAccount<TAccountBettor> &
            IAccountSignerMeta<TAccountBettor>
        : TAccountBettor,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      TAccountBet extends string ? WritableAccount<TAccountBet> : TAccountBet,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PlaceBetInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  outcome: boolean;
};

export type PlaceBetInstructionDataArgs = {
  amount: number | bigint;
  outcome: boolean;
};

export function getPlaceBetInstructionDataEncoder(): Encoder<PlaceBetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['outcome', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PLACE_BET_DISCRIMINATOR })
  );
}

export function getPlaceBetInstructionDataDecoder(): Decoder<PlaceBetInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['outcome', getBooleanDecoder()],
  ]);
}

export function getPlaceBetInstructionDataCodec(): Codec<
  PlaceBetInstructionDataArgs,
  PlaceBetInstructionData
> {
  return combineCodec(
    getPlaceBetInstructionDataEncoder(),
    getPlaceBetInstructionDataDecoder()
  );
}

export type PlaceBetAsyncInput<
  TAccountBettor extends string = string,
  TAccountMarket extends string = string,
  TAccountBet extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  bettor: TransactionSigner<TAccountBettor>;
  market: Address<TAccountMarket>;
  bet?: Address<TAccountBet>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: PlaceBetInstructionDataArgs['amount'];
  outcome: PlaceBetInstructionDataArgs['outcome'];
};

export async function getPlaceBetInstructionAsync<
  TAccountBettor extends string,
  TAccountMarket extends string,
  TAccountBet extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: PlaceBetAsyncInput<
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PlaceBetInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bettor: { value: input.bettor ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: true },
    bet: { value: input.bet ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.bet.value) {
    accounts.bet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([98, 101, 116])),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
        getAddressEncoder().encode(expectAddress(accounts.bettor.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.market.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bettor),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.bet),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPlaceBetInstructionDataEncoder().encode(
      args as PlaceBetInstructionDataArgs
    ),
  } as PlaceBetInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type PlaceBetInput<
  TAccountBettor extends string = string,
  TAccountMarket extends string = string,
  TAccountBet extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  bettor: TransactionSigner<TAccountBettor>;
  market: Address<TAccountMarket>;
  bet: Address<TAccountBet>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: PlaceBetInstructionDataArgs['amount'];
  outcome: PlaceBetInstructionDataArgs['outcome'];
};

export function getPlaceBetInstruction<
  TAccountBettor extends string,
  TAccountMarket extends string,
  TAccountBet extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: PlaceBetInput<
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PlaceBetInstruction<
  TProgramAddress,
  TAccountBettor,
  TAccountMarket,
  TAccountBet,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bettor: { value: input.bettor ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: true },
    bet: { value: input.bet ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bettor),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.bet),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPlaceBetInstructionDataEncoder().encode(
      args as PlaceBetInstructionDataArgs
    ),
  } as PlaceBetInstruction<
    TProgramAddress,
    TAccountBettor,
    TAccountMarket,
    TAccountBet,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedPlaceBetInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    bettor: TAccountMetas[0];
    market: TAccountMetas[1];
    bet: TAccountMetas[2];
    vault: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: PlaceBetInstructionData;
};

export function parsePlaceBetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPlaceBetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bettor: getNextAccount(),
      market: getNextAccount(),
      bet: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getPlaceBetInstructionDataDecoder().decode(instruction.data),
  };
}
