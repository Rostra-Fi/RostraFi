/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PREDICTION_MARKET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESOLVE_MARKET_DISCRIMINATOR = new Uint8Array([
  155, 23, 80, 173, 46, 74, 23, 239,
]);

export function getResolveMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESOLVE_MARKET_DISCRIMINATOR
  );
}

export type ResolveMarketInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountResolver extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountResolver extends string
        ? WritableSignerAccount<TAccountResolver> &
            IAccountSignerMeta<TAccountResolver>
        : TAccountResolver,
      TAccountMarket extends string
        ? WritableAccount<TAccountMarket>
        : TAccountMarket,
      ...TRemainingAccounts,
    ]
  >;

export type ResolveMarketInstructionData = {
  discriminator: ReadonlyUint8Array;
  winningOutcome: boolean;
};

export type ResolveMarketInstructionDataArgs = { winningOutcome: boolean };

export function getResolveMarketInstructionDataEncoder(): Encoder<ResolveMarketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['winningOutcome', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: RESOLVE_MARKET_DISCRIMINATOR })
  );
}

export function getResolveMarketInstructionDataDecoder(): Decoder<ResolveMarketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['winningOutcome', getBooleanDecoder()],
  ]);
}

export function getResolveMarketInstructionDataCodec(): Codec<
  ResolveMarketInstructionDataArgs,
  ResolveMarketInstructionData
> {
  return combineCodec(
    getResolveMarketInstructionDataEncoder(),
    getResolveMarketInstructionDataDecoder()
  );
}

export type ResolveMarketInput<
  TAccountResolver extends string = string,
  TAccountMarket extends string = string,
> = {
  resolver: TransactionSigner<TAccountResolver>;
  market: Address<TAccountMarket>;
  winningOutcome: ResolveMarketInstructionDataArgs['winningOutcome'];
};

export function getResolveMarketInstruction<
  TAccountResolver extends string,
  TAccountMarket extends string,
  TProgramAddress extends Address = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
>(
  input: ResolveMarketInput<TAccountResolver, TAccountMarket>,
  config?: { programAddress?: TProgramAddress }
): ResolveMarketInstruction<TProgramAddress, TAccountResolver, TAccountMarket> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PREDICTION_MARKET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    resolver: { value: input.resolver ?? null, isWritable: true },
    market: { value: input.market ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.resolver),
      getAccountMeta(accounts.market),
    ],
    programAddress,
    data: getResolveMarketInstructionDataEncoder().encode(
      args as ResolveMarketInstructionDataArgs
    ),
  } as ResolveMarketInstruction<
    TProgramAddress,
    TAccountResolver,
    TAccountMarket
  >;

  return instruction;
}

export type ParsedResolveMarketInstruction<
  TProgram extends string = typeof PREDICTION_MARKET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    resolver: TAccountMetas[0];
    market: TAccountMetas[1];
  };
  data: ResolveMarketInstructionData;
};

export function parseResolveMarketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResolveMarketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      resolver: getNextAccount(),
      market: getNextAccount(),
    },
    data: getResolveMarketInstructionDataDecoder().decode(instruction.data),
  };
}
